name: Snyk Scan

on: workflow_dispatch

jobs:
  snyk-sca:
    name: Snyk SCA Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch full history instead of a single commit
        ref: ${{ github.sha }}  # Checkout the specific commit that triggered the push
        token: ${{ secrets.GITHUB_TOKEN }}

    - uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      run: |
        find . -name "*.csproj" -exec dotnet restore {} \;

    - name: Install Snyk CLI
      run: |
        curl -Lo ./snyk https://static.snyk.io/cli/latest/snyk-linux
        chmod +x ./snyk
        mv ./snyk /usr/local/bin/

    - name: Install snyk-to-html
      run: |
        curl -Lo ./snyk-to-html https://github.com/snyk/snyk-to-html/releases/latest/download/snyk-to-html-linux
        chmod +x ./snyk-to-html
        mv ./snyk-to-html /usr/local/bin/

    - name: SNYK auth
      run: |
        snyk auth ${{secrets.SNYK_API_TOKEN}}

    - name: Install snyk-delta
      run: |
        curl -Lo ./snyk-delta https://github.com/snyk-labs/snyk-delta/releases/latest/download/snyk-delta-linux
        chmod +x ./snyk-delta
        mv ./snyk-delta /usr/local/bin/

    - name: Get Changed Files
      id: get_changed_files
      run: |
        # Get the list of modified files
        git diff --name-only HEAD^1 HEAD > changed_files.txt || true

        # Filter for relevant files (.csproj, .sln, .lock, .json)
        grep -E '\.(csproj|sln|lock|json)$' changed_files.txt | grep -v 'invalid.csproj' > relevant_changed_files.txt || true

        echo "Filtered Relevant Files:"
        cat relevant_changed_files.txt || true

        echo "changed_files=$(cat relevant_changed_files.txt)" >> "$GITHUB_OUTPUT"

    - name: Run Snyk Delta on Changed Files
      run: |
        set -e
        CHANGED_FILES=$(echo "${{ steps.get_changed_files.outputs.changed_files }}")

        if [ -n "$CHANGED_FILES" ]; then
          echo "Running Snyk Delta for each changed file:"
          while IFS= read -r file; do
            echo "Processing file: $file"
            PROJECT_NAME="repo/$file"

            # Get Current Project ID
            echo "Fetching Snyk Project ID for current: $PROJECT_NAME"
            CURRENT_PROJECT_ID=$(curl -s -H "Authorization: token ${{ secrets.SNYK_API_TOKEN }}" "https://api.snyk.io/rest/orgs/${{ secrets.SNYK_ORG_ID }}/projects?names=$PROJECT_NAME" | jq -r '.data[0].id' || true)
            if [ -z "$CURRENT_PROJECT_ID" ]; then
              echo "Warning: Could not find Snyk project with name: $PROJECT_NAME. Skipping delta for this file."
              continue
            fi
            echo "Current Snyk Project ID: $CURRENT_PROJECT_ID"

            # Assuming a consistent baseline project for all comparisons
            BASELINE_PROJECT_NAME="your-baseline-project-name" # Replace with your actual baseline project name
            echo "Fetching Snyk Baseline Project ID for: $BASELINE_PROJECT_NAME"
            BASELINE_PROJECT_ID=$(curl -s -H "Authorization: token ${{ secrets.SNYK_API_TOKEN }}" "https://api.snyk.io/rest/orgs/${{ secrets.SNYK_ORG_ID }}/projects?names=$BASELINE_PROJECT_NAME" | jq -r '.data[0].id' || true)
            if [ -z "$BASELINE_PROJECT_ID" ]; then
              echo "Error: Could not find Snyk baseline project with name: $BASELINE_PROJECT_NAME. Exiting."
              exit 1
            fi
            echo "Baseline Snyk Project ID: $BASELINE_PROJECT_ID"

            # Run snyk delta (note: this still expects snyk test output)
            echo "Running snyk delta..."
            snyk test --file="$file" --json --org="${{ secrets.SNYK_ORG_ID }}" --project-name="$PROJECT_NAME" | \
            snyk delta --baselineOrg="${{ secrets.SNYK_ORG_ID }}" --baselineProject="$BASELINE_PROJECT_ID" --currentOrg="${{ secrets.SNYK_ORG_ID }}" --currentProject="$CURRENT_PROJECT_ID"
            echo "-------------------------"
          done <<< "$CHANGED_FILES"
        else
          echo "No relevant files to process."
        fi
